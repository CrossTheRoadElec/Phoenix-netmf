using System;

namespace CTRE.Phoenix
{
    public class LowLevel_Pcm : CANBusDevice
    {
        const UInt32 STATUS_1 = 0x09041400;
        const UInt32 STATUS_2 = 0x09041440;
        const UInt32 CONTROL_1 = 0x09041C00; /* PCM_Control */
        const UInt32 CONTROL_2 = 0x09041C40; /* PCM_SupplemControl */
        const UInt32 CONTROL_3 = 0x09041C80; /* PcmControlSetOneShotDur_t */

        private UInt64 _cache;
        private UInt32 _len;

        private const UInt32 kDefaultPeriodMs = 20;
        private const UInt32 kNumSolChannels = 8;

        public LowLevel_Pcm(uint deviceId)
            : base(deviceId)
        {
            CTRE.Native.CAN.Send(CONTROL_1 | _deviceNumber, 0x00, 8, kDefaultPeriodMs);
        }
        public LowLevel_Pcm(uint deviceId, uint periodMs)
            : base(deviceId)
        {
            CTRE.Native.CAN.Send(CONTROL_1 | _deviceNumber, 0x00, 8, periodMs);
        }

        //-------------------------------- Autogenerated -------------------------------------//
        public int GetSol(int idx, out bool param)
        {
            param = false;
            if (idx < 0)
                return (int)CANBusDevice.Codes.CAN_INVALID_PARAM;
            if (idx >= kNumSolChannels)
                return (int)CANBusDevice.Codes.CAN_INVALID_PARAM;
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> idx);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetPressureSwitchState(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 15);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetIsCloseLoopEnabled(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 14);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetBatteryVoltage(out float param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 16);
            Int32 raw = 0;
            raw |= L;
            param = 0.05F * raw + 4F;
            return retval;
        }
        public int GetSolenoidVoltage(out float param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte H = (byte)(_cache >> 24);
            byte L = (byte)(_cache >> 32);
            H &= 0xff;
            L &= 0xc0;
            Int32 raw = 0;
            raw |= H;
            raw <<= 8;
            raw |= L;
            raw >>= 6;
            param = 0.03125F * raw + 0F;
            return retval;
        }
        public int GetCompressorCurrent(out float param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte H = (byte)(_cache >> 32);
            byte L = (byte)(_cache >> 40);
            H &= 0x3f;
            L &= 0xf0;
            Int32 raw = 0;
            raw |= H;
            raw <<= 8;
            raw |= L;
            raw >>= 4;
            param = 0.03125F * raw + 0F;
            return retval;
        }
        public int GetFault_HardwareFailure(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 13);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetFault_CompCurrentTooHigh(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 12);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetFault_FuseTripped(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 11);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetStickyFault_CompCurrentTooHigh(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 10);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetStickyFault_FuseTripped(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 9);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetCompressorOn(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 8);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetTokEnabled(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 42);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetFault_CompShort(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 41);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetStickyFault_CompShort(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_1 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 40);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetBlacklistSolen(int idx, out bool param)
        {
            param = false;
            if (idx < 0)
                return (int)CANBusDevice.Codes.CAN_INVALID_PARAM;
            if (idx >= kNumSolChannels)
                return (int)CANBusDevice.Codes.CAN_INVALID_PARAM;
            int retval = CTRE.Native.CAN.Receive(STATUS_2 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> idx);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetFault_SolenoidJumper(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_2 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 15);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetStickyFault_SolenoidJumper(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_2 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 14);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetFault_CompNoCurrent(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_2 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 13);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetStickyFault_CompNoCurrent(out bool param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_2 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 12);
            param = (L & 1) > 0;
            return retval;
        }
        public int GetZeroCurrDuringComp16Ms(out float param)
        {
            int retval = CTRE.Native.CAN.Receive(STATUS_2 | _deviceNumber, ref _cache, ref _len);
            byte L = (byte)(_cache >> 16);
            Int32 raw = 0;
            raw |= L;
            param = 16F * raw + 0F;
            return retval;
        }
        public int SetEnableSol(int idx, bool param)
        {
            if (idx < 0)
                return (int)CANBusDevice.Codes.CAN_INVALID_PARAM;
            if (idx >= kNumSolChannels)
                return (int)CANBusDevice.Codes.CAN_INVALID_PARAM;
            int retval = CTRE.Native.CAN.GetSendBuffer(CONTROL_1 | _deviceNumber, ref _cache);
            if (retval != 0)
                return retval;
            if (param == false)
                _cache &= ~(1ul << (16 + idx));
            else
                _cache |= 1ul << (16 + idx);
            CTRE.Native.CAN.Send(CONTROL_1 | _deviceNumber, _cache, 8, 0xFFFFFFFF);
            return retval;
        }
        //public int SetClearStickyFaults(bool param)
        //{
        //    int retval = CTRE.Native.CAN.GetSendBuffer(CONTROL_1 | _deviceNumber, ref _cache);
        //    if (retval != 0)
        //        return retval;
        //    if (param == false)
        //        _cache &= ~(1ul << 31);
        //    else
        //        _cache |= 1ul << 31;
        //    CTRE.Native.CAN.Send(CONTROL_1 | _deviceNumber, _cache, 8, 0xFFFFFFFF);
        //    return retval;
        //}

        /* Clears PCM sticky faults (indicators of past faults
         *
         * @Return	-	int	-	Error code (if any) for setting solenoid
         *
         * @Param 	-	clr		- 	Clear / do not clear faults
         */
        public int ClearStickyFaults()
        {
            return CTRE.Native.CAN.Send(CONTROL_2 | GetDeviceNumber(), 0x80000000, 4, 0); /* set bit7 in third byte */
        }
        public int SetCloseLoopEnable(bool param)
        {
            int retval = CTRE.Native.CAN.GetSendBuffer(CONTROL_1 | _deviceNumber, ref _cache);
            if (retval != 0)
                return retval;
            if (param == false)
                _cache &= ~(1ul << 30);
            else
                _cache |= 1ul << 30;
            CTRE.Native.CAN.Send(CONTROL_1 | _deviceNumber, _cache, 8, 0xFFFFFFFF);
            return retval;
        }
    }
}
